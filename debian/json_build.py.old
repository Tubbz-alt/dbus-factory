#!/usr/bin/env python

import os

PROXYER = '/usr/lib/go/bin/dbus-proxyer-gen'
def generate_source(json,target):
	json_header = json.split('.in.json')[0]
	outdir = ''
	install_dir = ''
	json_meta = []
	if target == 'qml':
		outdir += 'qml/'
		path = json_header.replace('.','_')
	elif target == 'golang':
		outdir += 'go/src/'
		path = json_header.split('.')[-1].lower()
		json_meta = json_header.split('.')
		json_meta.pop()
		for i in json_meta:
			install_dir += i.lower() + '/'
	else:
		print ("%s is not supported yet!" % target)
		exit()

	outdir += path
	cmd = PROXYER+' -in '+json+' -out '+outdir+' -target '+target
	os.system(cmd)
	print json_header
	print json_meta
	print path
	print install_dir
	return path,install_dir

def build(path,target,installdir):
	owd = os.getcwd()
	work = ''
	try:
		if target == 'qml':
			work = work + target +'/'+path
			os.chdir(work)
			os.system('make')
		elif target == 'golang':
			target = 'go'
			work = work + target + '/'
			cmd = 'GOPATH=`pwd` go install '+path
			if (os.uname()[4] == 'x86_64'):
                            arch = 'linux_amd64'
                        else:
                            arch = 'linux_386'
			os.chdir(work)
			os.system(cmd)
			install_path_dir = install_dir+'/'+path
			os.system('mkdir -p src/%s' % install_path_dir)
			os.system('cp -ar src/%s/* src/%s' % (path, install_path_dir))
                        if not os.path.isdir('fix_pkg/%s/%s' % (arch,install_dir)):
                            os.system('mkdir -p fix_pkg/%s/%s' % (arch,install_dir))
			os.system('cp -a pkg/%s/* fix_pkg/%s/%s' % (arch, arch, install_dir))
			os.system('rm -rf src/%s' % path)
			os.system('rm -rf pkg')
	finally:
		os.chdir(owd)

def fix_dir(path,newpath,workdir='.'):
    owd = os.getcwd()
    try:
        os.chdir(workdir)
        if os.path.isdir(path):
            if os.path.isdir(newpath):
                os.system('rm -rf %s' % newpath)
            os.system('mv %s %s' % (path,newpath))
    finally:
        os.chdir(owd)
    

if __name__ == '__main__':
	files = os.listdir('.')
	json_in = []
	for i in files:
		if '.in.json' in i:
			json_in.append(i) 
	for each_json_in in json_in:
		for target in ['qml','golang']:
			path,install_dir = generate_source(each_json_in,target)
			build(path,target,install_dir)
	fix_dir('fix_pkg','pkg','go')
